1. Cocoa touch Framework란?
  iOS의 개발환경을 구축하기 위한 최상위 프레임 워크. 
  일반적으로 iOS 개발을 위해 Object-C, Swift에서 상속하여 사용하는 UIKit, Foundation을 포함한 대부분의 클래스 객체들이 Cocoa touch Framework에 속한다. 

  (1)Foundation은 기본적인 데이터 타입부터 자료구조, 각종 구조체, 타이머, 네트워크 통신, 파일관리 등 기본적인 프로그램의 중심을 담당한다.
  (2)UIKit는 UI에서 알 수 있듯, 사용자의 인터페이스를 관리하고 이벤트를 처리하는것이 주목적이다. 
    제스처 처리, 애니메이션, 그림 그리기, 이미지 처리, 텍스트 처리 등, 그리고 테이블뷰, 슬라이드, 버튼, 텍스트 필드, alert 등 어플리케이션의 화면을 구성하는 요소 포함한다. 
     UI가 붙는 클래스들을 사용하려면 UIKit을 import 시켜줘야한다.
     
2. MVC
  UIKit  App의 구조는 기본적으로 MVC 디자인 패턴을 사용한다.
  M: Model - 앱의 데이터와 비지니스 로직을 가지고 있다. (무엇을)
  V: View - 사용자에게 데이터를 보여주는 UI를 담당한다. (보여주는가)
  C: Controler - 모델과 뷰의 중간다리 역할로, 뷰로부터 사용자의 액션을 전달받아서 모델에게 어떤 작업을 해야하는지 알려주거나 모델의 데이터 변환을 뷰에게 전달하여 뷰를 어떻게 업데이트해야할지 알려준다. (어떻게)
  
  뷰와 모델의 상호의존성을 없애고 컨트롤러가 뷰와 모델의 중간다리 역할을 하는게 MVC 패턴의 가장 이상적인 형태.
  하지만 현실의 UIKit App 구조는 뷰와 컨트롤러의 상호의존성이 강하다. 
  애플의 MVC 패턴에서는 뷰와 뷰컨틀로러가 너무 친하다. 
  뷰와 컨트롤러가 서로 강하게 연결되어 있어 뷰 컨트롤러가 거의 모든 일을 담당하고, 뷰 컨트롤러에서는 컨트롤러가 뷰의 라이프 사이클을 관여하기 때문에 뷰와 컨트롤러를 분리하기는 어렵다. 
  따라서 프로젝트규모가 커질 수록 컨트롤러가 비대해지고 내부 구조는 복잡하게 되어 유지보수가 힘들어지는 상황이 온다. 
  이러한 MVC 패턴의 문제점을 해결하기 위해서 MVVM나 VIPER 패턴 등 다양한 디자인 패턴으로 MVC 단점을 해결할 수 있다.
